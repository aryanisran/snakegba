make.exe all --print-data-base --no-builtin-variables --no-builtin-rules --question
make: *** No rule to make target 'all'.  Stop.
 
# GNU Make 4.3
# Built for x86_64-pc-msys
# Copyright (C) 1988-2020 Free Software Foundation, Inc.
# License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
# This is free software: you are free to change and redistribute it.
# There is NO WARRANTY, to the extent permitted by law.
 

# Make data base, printed on Wed Sep 15 20:39:37 2021

# Variables

# environment
SYSTEMDRIVE = C:
# makefile (from '/opt/devkitpro/devkitARM/base_rules', line 6)
PORTLIBS_PATH := /opt/devkitpro/portlibs
# makefile (from '/opt/devkitpro/devkitARM/base_tools', line 23)
AS := arm-none-eabi-as
# makefile (from 'Makefile', line 75)
OUTPUT := /d/PPs/firstgba/firstgba
 
# environment
LC_ALL = C
# makefile (from '/opt/devkitpro/devkitARM/base_tools', line 24)
AR := arm-none-eabi-gcc-ar
# environment
USERPROFILE = C:\Users\aryan
# makefile (from 'Makefile', line 111)
OFILES :=   main.o 
# environment
LOCALAPPDATA = C:\Users\aryan\AppData\Local
# environment
VSCODE_IPC_HOOK_EXTHOST = \\.\pipe\vscode-ipc-930c910f-0feb-4e34-90ab-54e0b07dfa3d-sock
# makefile (from 'Makefile', line 77)
VPATH := /d/PPs/firstgba/asm /d/PPs/firstgba/source /d/PPs/firstgba/resources /d/PPs/firstgba/data 
# makefile (from 'Makefile', line 83)
CFILES :=  main.c 
# environment
VSCODE_CWD = C:\Users\aryan\AppData\Local\Programs\Microsoft VS Code
# environment
SYSTEMROOT = C:\WINDOWS
# makefile (from 'Makefile', line 57)
LIBS := -lmm -lgba -ltonc
# makefile (from '/opt/devkitpro/devkitARM/base_tools', line 43)
SILENTMSG := @echo
# environment
PROCESSOR_LEVEL = 6
# environment
PSMODULEPATH = C:\Program Files\WindowsPowerShell\Modules;C:\WINDOWS\system32\WindowsPowerShell\v1.0\Modules
# default
MAKE_COMMAND := make
# makefile (from 'Makefile', line 107)
OFILES_BIN := 
# automatic
@D = $(patsubst %/,%,$(dir $@))
# environment
CHROME_CRASHPAD_PIPE_NAME = \\.\pipe\crashpad_28112_IXEHDMXJKRXTGWPZ
# makefile (from 'Makefile', line 84)
CPPFILES := $(subst ,,  )
# environment
VSCODE_HANDLES_UNCAUGHT_ERRORS = true
# default
.VARIABLES := 
# automatic
%D = $(patsubst %/,%,$(dir $%))
# automatic
^D = $(patsubst %/,%,$(dir $^))
# environment
VSCODE_LOG_STACK = false
# automatic
%F = $(notdir $%)
# environment
VSCODE_CODE_CACHE_PATH = C:\Users\aryan\AppData\Roaming\Code\CachedData\83bd43bc519d15e50c4272c6cf5c1479df196a4d
# environment
LANG = C
# default
.LOADED := 
# environment
TMP = /home/aryan/AppData/Local/Temp
# default
.INCLUDE_DIRS = /usr/include /usr/include
# makefile
MAKEFLAGS = pqrR
# makefile (from 'Makefile', line 85)
SFILES := $(subst ,,  )
# environment
INTEL_DEV_REDIST = C:\Program Files (x86)\Common Files\Intel\Shared Libraries\
# environment
ONEDRIVE = C:\Users\aryan\OneDrive
# environment
DEVKITARM = /opt/devkitpro/devkitARM
# makefile
CURDIR := /d/PPs/firstgba
# environment
VSCODE_PIPE_LOGGING = true
# makefile (from 'Makefile', line 34)
MUSIC := 
# environment
APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL = true
# automatic
*D = $(patsubst %/,%,$(dir $*))
# makefile (from 'Makefile', line 81)
DEPSDIR := /d/PPs/firstgba/build
# environment
PROGRAMFILES = C:\Program Files
# environment
MFLAGS = -pqrR
# default
.SHELLFLAGS := -c
# environment
COMMONPROGRAMW6432 = C:\Program Files\Common Files
# automatic
+D = $(patsubst %/,%,$(dir $+))
# makefile (from '/opt/devkitpro/devkitARM/base_tools', line 1)
MAKEFILE_LIST := Makefile D:/PPs/tonc-code/code/tonc_rules /opt/devkitpro/devkitARM/gba_rules /opt/devkitpro/devkitARM/base_rules /opt/devkitpro/devkitARM/base_tools
 
# makefile (from 'Makefile', line 51)
ASFLAGS := -g -mthumb -mthumb-interwork
# automatic
@F = $(notdir $@)
# environment
VSCODE_VERBOSE_LOGGING = true
# environment
VSCODE_PID = 28112
# automatic
?D = $(patsubst %/,%,$(dir $?))
# makefile (from '/opt/devkitpro/devkitARM/base_tools', line 28)
RANLIB := arm-none-eabi-gcc-ranlib
# environment
DEVKITPPC = /opt/devkitpro/devkitPPC
# makefile (from 'Makefile', line 113)
HFILES := 
# makefile (from 'Makefile', line 32)
INCLUDES := include resources 
# automatic
*F = $(notdir $*)
# automatic
<D = $(patsubst %/,%,$(dir $<))
# environment
VSCODE_NLS_CONFIG = {"locale":"en-us","availableLanguages":{},"_languagePackSupport":true}
# makefile (from 'Makefile', line 115)
INCLUDE := -iquote /d/PPs/firstgba/include -iquote /d/PPs/firstgba/resources -I/opt/devkitpro/libgba/include -ID:/PPs/tonc-code/code/tonclib/include -I/d/PPs/firstgba/build
# default
MAKE_HOST := x86_64-pc-msys
# environment
PROGRAMDATA = C:\ProgramData
# default
SHELL := /bin/sh
# environment
HOMEPATH = \Users\aryan
# default
MAKECMDGOALS := all
# makefile (from 'Makefile', line 109)
OFILES_SOURCES :=  main.o 
# environment
DRIVERDATA = C:\Windows\System32\Drivers\DriverData
# environment
COMSPEC = C:\WINDOWS\system32\cmd.exe
# environment
WINDIR = C:\WINDOWS
# makefile (from 'Makefile', line 86)
BINFILES := 
# environment
MAKELEVEL := 0
# makefile (from 'Makefile', line 7)
TONCCODE = D:/PPs/tonc-code/code
# makefile (from 'Makefile', line 119)
LIBPATHS := -L/opt/devkitpro/libgba/lib -LD:/PPs/tonc-code/code/tonclib/lib
# default
MAKE = $(MAKE_COMMAND)
# makefile (from '/opt/devkitpro/devkitARM/base_tools', line 14)
 
PATH := /opt/devkitpro/tools/bin:/opt/devkitpro/devkitARM/bin:/opt/devkitpro/devkitARM/bin:/opt/devkitpro/msys2/usr/bin:/c/Program Files (x86)/Common Files/Oracle/Java/javapath:/c/Program Files (x86)/Common Files/Intel/Shared Libraries/redist/intel64/compiler:/c/Program Files (x86)/Intel/Intel(R) Management Engine Components/iCLS:/c/Program Files/Intel/Intel(R) Management Engine Components/iCLS:/c/Windows/system32:/c/Windows:/c/Windows/System32/Wbem:/c/Windows/System32/WindowsPowerShell/v1.0:/c/Windows/System32/OpenSSH:/c/Program Files (x86)/Intel/Intel(R) Management Engine Components/DAL:/c/Program Files/Intel/Intel(R) Management Engine Components/DAL:/c/Program Files (x86)/Intel/Intel(R) Management Engine Components/IPT:/c/Program Files/Intel/Intel(R) Management Engine Components/IPT:/c/Program Files (x86)/NVIDIA Corporation/PhysX/Common:/c/Program Files/dotnet:/c/Program Files/NVIDIA Corporation/NVIDIA NvDLISR:/c/WINDOWS/system32:/c/WINDOWS:/c/WINDOWS/System32/Wbem:/c/WINDOWS/System32/WindowsPowerShell/v1.0:/c/WINDOWS/System32/OpenSSH:/c/Program Files/Git/cmd:/home/aryan/AppData/Local/Programs/Python/Python39/Scripts:/home/aryan/AppData/Local/Programs/Python/Python39:/home/aryan/AppData/Local/Microsoft/WindowsApps:/home/aryan/AppData/Local/GitHubDesktop/bin:/home/aryan/AppData/Local/atom/bin:/home/aryan/AppData/Local/Programs/Microsoft VS Code/bin:/home/aryan/AppData/Local/Microsoft/WindowsApps
# environment
COMPUTERNAME = DGDD-NB1928091
# default
MAKEFILES := 
# automatic
^F = $(notdir $^)
# makefile (from '/opt/devkitpro/devkitARM/base_tools', line 5)
UNAME_R := 3.2.0-340.x86_64
# environment
PROMPT = $P$G
# makefile (from '/opt/devkitpro/devkitARM/base_tools', line 19)
PREFIX := arm-none-eabi-
# makefile (from 'Makefile', line 64)
LIBDIRS := /opt/devkitpro/libgba D:/PPs/tonc-code/code/tonclib
# environment
LOGONSERVER = \\DGDD-NB1928091
# environment
VSCODE_LOG_NATIVE = false
# environment
USERNAME = aryan
# environment
COMMONPROGRAMFILES = C:\Program Files\Common Files
# automatic
?F = $(notdir $?)
# makefile (from '/opt/devkitpro/devkitARM/base_tools', line 50)
bin2o = 	bin2s -a 4 -H `(echo $(<F) | tr . _)`.h $< | $(AS) -o $(<F).o
# environment
PROGRAMW6432 = C:\Program Files
# environment
DEVKITPRO = /opt/devkitpro
# makefile (from '/opt/devkitpro/devkitARM/base_tools', line 4)
UNAME_S := MSYS_NT-10.0-19043
# environment
PATHEXT = .COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC
# automatic
+F = $(notdir $+)
# environment
ORIGINAL_XDG_CURRENT_DESKTOP = undefined
# environment
USERDOMAIN = DGDD-NB1928091
# 'override' directive
GNUMAKEFLAGS := 
# environment
OS = Windows_NT
# makefile
.DEFAULT_GOAL := build
# makefile (from 'Makefile', line 39)
ARCH := -mthumb -mthumb-interwork
# default
MAKE_VERSION := 4.3
# 'override' directive
.SHELLSTATUS := 0
# makefile (from '/opt/devkitpro/devkitARM/base_tools', line 44)
SILENTCMD := @
# environment
PROGRAMFILES(X86) = C:\Program Files (x86)
# makefile (from 'Makefile', line 30)
BUILD := build
# makefile (from 'Makefile', line 52)
LDFLAGS = -g $(ARCH) -Wl,-Map,$(notdir $*.map)
# environment
!D: = d:\PPs\firstgba
# environment
USERDOMAIN_ROAMINGPROFILE = DGDD-NB1928091
# environment
NUMBER_OF_PROCESSORS = 12
# makefile (from '/opt/devkitpro/devkitARM/base_tools', line 30)
ISVC = $(or $(VCBUILDHELPER_COMMAND),$(MSBUILDEXTENSIONSPATH32),$(MSBUILDEXTENSIONSPATH))
# environment
PUBLIC = C:\Users\Public
# makefile (from '/opt/devkitpro/devkitARM/gba_rules', line 9)
LIBGBA := /opt/devkitpro/libgba
# environment
APPDATA = C:\Users\aryan\AppData\Roaming
# makefile (from 'Makefile', line 44)
CFLAGS := -g -Wall -O3 -mcpu=arm7tdmi -mtune=arm7tdmi -fomit-frame-pointer -ffast-math -mthumb -mthumb-interwork
# environment
HOMEDRIVE = C:
# environment
PROCESSOR_ARCHITECTURE = AMD64
# environment
VSCODE_AMD_ENTRYPOINT = vs/workbench/services/extensions/node/extensionHostProcess
# environment
HOME = /home/aryan
# environment
COMMONPROGRAMFILES(X86) = C:\Program Files (x86)\Common Files
# makefile (from '/opt/devkitpro/devkitARM/base_tools', line 13)
DEVKITPATH = $(shell echo "$(DEVKITPRO)" | sed -e 's/^\([a-zA-Z]\):/\/\1/')
# makefile (from '/opt/devkitpro/devkitARM/gba_rules', line 7)
PORTLIBS := /opt/devkitpro/portlibs/gba /opt/devkitpro/portlibs/armv4
# environment
ELECTRON_RUN_AS_NODE = 1
# environment
TEMP = /home/aryan/AppData/Local/Temp
# environment
VSCODE_IPC_HOOK = \\.\pipe\0734e9d59642a682f77daee6d9a2092a-1.60.1-main-sock
# environment
TERM = xterm-256color
# makefile (from '/opt/devkitpro/devkitARM/base_tools', line 27)
NM := arm-none-eabi-gcc-nm
# default
.RECIPEPREFIX := 
 
# automatic
<F = $(notdir $<)
# default
SUFFIXES := 
# environment
ALLUSERSPROFILE = C:\ProgramData
# makefile (from 'Makefile', line 29)
TARGET := firstgba
# makefile (from 'Makefile', line 98)
LD := arm-none-eabi-gcc
# environment
SESSIONNAME = Console
# makefile (from 'Makefile', line 49)
CXXFLAGS := -g -Wall -O3 -mcpu=arm7tdmi -mtune=arm7tdmi -fomit-frame-pointer -ffast-math -mthumb -mthumb-interwork -fno-rtti -fno-exceptions
# makefile (from '/opt/devkitpro/devkitARM/base_tools', line 26)
STRIP := arm-none-eabi-strip
# default
.FEATURES := target-specific order-only second-expansion else-if shortest-stem undefine oneshell nocomment grouped-target extra-prereqs archives jobserver output-sync check-symlink load
# environment
MIC_LD_LIBRARY_PATH = C:\Program Files (x86)\Common Files\Intel\Shared Libraries\compiler\lib\mic
# environment
PROCESSOR_REVISION = 9e0a
# makefile (from '/opt/devkitpro/devkitARM/base_tools', line 22)
CXX := arm-none-eabi-g++
# makefile (from '/opt/devkitpro/devkitARM/base_tools', line 21)
CC := arm-none-eabi-gcc
# makefile (from '/opt/devkitpro/devkitARM/base_tools', line 25)
OBJCOPY := arm-none-eabi-objcopy
# makefile (from 'Makefile', line 31)
SOURCES := asm source resources
# makefile (from 'Makefile', line 33)
DATA := data
# environment
PROCESSOR_IDENTIFIER = Intel64 Family 6 Model 158 Stepping 10, GenuineIntel
# variable set hash-table stats:
# Load=147/1024=14%, Rehash=0, Collisions=25/293=9%

# Pattern-specific Variable Values

# No pattern-specific variable values.

# Directories

# /d/PPs/firstgba/source (device 1022307455, inode 3377699720598693): 3 files, no impossibilities.
# /d/PPs/firstgba/resources: could not be stat'd.
# resources: could not be stat'd.
# asm: could not be stat'd.
# . (device 1022307455, inode 39687971716222198): 15 files, no impossibilities.
# /d/PPs/firstgba/asm: could not be stat'd.
# source (device 1022307455, inode 3377699720598693): 3 files, no impossibilities.
# data: could not be stat'd.
# /d/PPs/firstgba/data: could not be stat'd.

 
# 21 files, no impossibilities in 9 directories.

# Implicit Rules

%.mb.elf:
#  recipe to execute (from 'D:/PPs/tonc-code/code/tonc_rules', line 34):
	@echo Linking multiboot
	$(LD) -specs=gba_mb.specs $(LDFLAGS) $(OFILES) $(LIBPATHS) $(LIBS) -o $@
	$(NM) -Sn $@ > $(basename $(notdir $@)).map

%.a:
#  recipe to execute (from '/opt/devkitpro/devkitARM/base_rules', line 12):
	$(SILENTMSG) $(notdir $@)
	@rm -f $@
	$(SILENTCMD)$(AR) -rc $@ $^

%.arm.o: %.arm.cpp
#  recipe to execute (from '/opt/devkitpro/devkitARM/base_rules', line 18):
	$(SILENTMSG) $(notdir $<)
	$(SILENTCMD)$(CXX) -MMD -MP -MF $(DEPSDIR)/$*.arm.d $(CXXFLAGS) -marm -c $< -o $@ $(ERROR_FILTER)

%.arm.o: %.arm.c
#  recipe to execute (from '/opt/devkitpro/devkitARM/base_rules', line 23):
	$(SILENTMSG) $(notdir $<)
	$(SILENTCMD)$(CC) -MMD -MP -MF $(DEPSDIR)/$*.arm.d $(CFLAGS) -marm -c $< -o $@ $(ERROR_FILTER)

%.arm.o: %.arm.m
#  recipe to execute (from '/opt/devkitpro/devkitARM/base_rules', line 28):
	$(SILENTMSG) $(notdir $<)
	$(SILENTCMD)$(CC) -MMD -MP -MF $(DEPSDIR)/$*.arm.d $(OBJCFLAGS) -marm -c $< -o $@ $(ERROR_FILTER)

%.thumb.o: %.thumb.cpp
#  recipe to execute (from '/opt/devkitpro/devkitARM/base_rules', line 33):
	$(SILENTMSG) $(notdir $<)
	$(SILENTCMD)$(CXX) -MMD -MP -MF $(DEPSDIR)/$*.thumb.d $(CXXFLAGS) -mthumb -c $< -o $@ $(ERROR_FILTER)

%.thumb.o: %.thumb.c
#  recipe to execute (from '/opt/devkitpro/devkitARM/base_rules', line 38):
	$(SILENTMSG) $(notdir $<)
	$(SILENTCMD)$(CC) -MMD -MP -MF $(DEPSDIR)/$*.thumb.d $(CFLAGS) -mthumb -c $< -o $@ $(ERROR_FILTER)

%.thumb.o: %.thumb.m
#  recipe to execute (from '/opt/devkitpro/devkitARM/base_rules', line 43):
	$(SILENTMSG) $(notdir $<)
	$(SILENTCMD)$(CC) -MMD -MP -MF $(DEPSDIR)/$*.thumb.d $(OBJCFLAGS) -mthumb -c $< -o $@ $(ERROR_FILTER)

%.iwram.o: %.iwram.cpp
#  recipe to execute (from '/opt/devkitpro/devkitARM/base_rules', line 48):
	$(SILENTMSG) $(notdir $<)
	$(SILENTCMD)$(CXX) -MMD -MP -MF $(DEPSDIR)/$*.iwram.d $(CXXFLAGS) -marm -mlong-calls -c $< -o $@ $(ERROR_FILTER)

%.iwram.o: %.iwram.c
#  recipe to execute (from '/opt/devkitpro/devkitARM/base_rules', line 53):
	$(SILENTMSG) $(notdir $<)
	$(SILENTCMD)$(CC) -MMD -MP -MF $(DEPSDIR)/$*.iwram.d $(CFLAGS) -marm -mlong-calls -c $< -o $@ $(ERROR_FILTER)

%.iwram.o: %.iwram.m
#  recipe to execute (from '/opt/devkitpro/devkitARM/base_rules', line 58):
	$(SILENTMSG) $(notdir $<)
	$(SILENTCMD)$(CC) -MMD -MP -MF $(DEPSDIR)/$*.iwram.d $(OBJCFLAGS) -marm -mlong-calls -c $< -o $@ $(ERROR_FILTER)

%.itcm.o: %.itcm.cpp
#  recipe to execute (from '/opt/devkitpro/devkitARM/base_rules', line 63):
	$(SILENTMSG) $(notdir $<)
	$(SILENTCMD)$(CXX) -MMD -MP -MF $(DEPSDIR)/$*.itcm.d $(CXXFLAGS) -marm -mlong-calls -c $< -o $@ $(ERROR_FILTER)

%.itcm.o: %.itcm.c
#  recipe to execute (from '/opt/devkitpro/devkitARM/base_rules', line 68):
	$(SILENTMSG) $(notdir $<)
	$(SILENTCMD)$(CC) -MMD -MP -MF $(DEPSDIR)/$*.itcm.d $(CFLAGS) -marm -mlong-calls -c $< -o $@ $(ERROR_FILTER)

%.itcm.o: %.itcm.m
#  recipe to execute (from '/opt/devkitpro/devkitARM/base_rules', line 73):
	$(SILENTMSG) $(notdir $<)
	$(SILENTCMD)$(CC) -MMD -MP -MF $(DEPSDIR)/$*.itcm.d $(OBJCFLAGS) -marm -mlong-calls -c $< -o $@ $(ERROR_FILTER)

%.o: %.cpp
#  recipe to execute (from '/opt/devkitpro/devkitARM/base_rules', line 79):
	$(SILENTMSG) $(notdir $<)
	$(SILENTCMD)$(CXX) -MMD -MP -MF $(DEPSDIR)/$*.d $(CXXFLAGS) -c $< -o $@ $(ERROR_FILTER)

%.o: %.c
#  recipe to execute (from '/opt/devkitpro/devkitARM/base_rules', line 84):
	$(SILENTMSG) $(notdir $<)
 
	$(SILENTCMD)$(CC) -MMD -MP -MF $(DEPSDIR)/$*.d $(CFLAGS) -c $< -o $@ $(ERROR_FILTER)

%.o: %.m
#  recipe to execute (from '/opt/devkitpro/devkitARM/base_rules', line 89):
	$(SILENTMSG) $(notdir $<)
	$(SILENTCMD)$(CC) -MMD -MP -MF $(DEPSDIR)/$*.d $(OBJCFLAGS) -c $< -o $@ $(ERROR_FILTER)

%.o: %.s
#  recipe to execute (from '/opt/devkitpro/devkitARM/base_rules', line 94):
	$(SILENTMSG) $(notdir $<)
	$(SILENTCMD)$(CC) -MMD -MP -MF $(DEPSDIR)/$*.d -x assembler-with-cpp $(ASFLAGS) -c $< -o $@ $(ERROR_FILTER)

%.o: %.S
#  recipe to execute (from '/opt/devkitpro/devkitARM/base_rules', line 99):
	$(SILENTMSG) $(notdir $<)
	$(SILENTCMD)$(CC) -MMD -MP -MF $(DEPSDIR)/$*.d -x assembler-with-cpp $(ASFLAGS) -c $< -o $@ $(ERROR_FILTER)

%.gba: %.elf
#  recipe to execute (from '/opt/devkitpro/devkitARM/gba_rules', line 13):
	$(SILENTCMD)$(OBJCOPY) -O binary $< $@
	@echo built ... $(notdir $@)
	$(SILENTCMD)gbafix $@

%_mb.elf:
#  recipe to execute (from '/opt/devkitpro/devkitARM/gba_rules', line 19):
	$(SILENTMSG) linking multiboot
	$(SILENTCMD)$(LD) -specs=gba_mb.specs $(LDFLAGS) $(OFILES) $(LIBPATHS) $(LIBS) -o $@

%.elf:
#  recipe to execute (from '/opt/devkitpro/devkitARM/gba_rules', line 24):
	$(SILENTMSG) linking cartridge
	$(SILENTCMD)$(LD)  $(LDFLAGS) -specs=gba.specs $(OFILES) $(LIBPATHS) $(LIBS) -o $@

# 22 implicit rules, 0 (0.0%) terminal.
# Files

# Not a target:
D:/PPs/tonc-code/code/tonc_rules:
#  Implicit rule search has been done.
#  Last modified 2013-03-24 19:56:40
#  File has been updated.
#  Successfully updated.

# Not a target:
/opt/devkitpro/devkitARM/base_tools:
#  Implicit rule search has been done.
#  Last modified 2020-07-28 10:27:14
#  File has been updated.
#  Successfully updated.

# Not a target:
Makefile:
#  Implicit rule search has been done.
#  Last modified 2021-09-15 20:39:23.923115
#  File has been updated.
#  Successfully updated.

clean:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 130):
	@echo clean ...
	@rm -fr $(BUILD) $(TARGET).elf $(TARGET).gba 

# Not a target:
/opt/devkitpro/devkitARM/base_rules:
#  Implicit rule search has been done.
#  Last modified 2020-07-28 10:27:14
#  File has been updated.
#  Successfully updated.

# Not a target:
/opt/devkitpro/devkitARM/gba_rules:
 
#  Implicit rule search has been done.
#  Last modified 2020-07-28 10:27:14
#  File has been updated.
#  Successfully updated.

# Not a target:
.DEFAULT:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# Not a target:
all:
#  Command line target.
#  Implicit rule search has been done.
#  File does not exist.
#  File has not been updated.

build:
#  Phony target (prerequisite of .PHONY).
#  Implicit rule search has not been done.
#  File does not exist.
#  File has not been updated.
#  recipe to execute (from 'Makefile', line 125):
	@[ -d $@ ] || mkdir -p $@
	@$(MAKE) BUILDDIR=`cd $(BUILD) && pwd` --no-print-directory -C $(BUILD) -f $(CURDIR)/Makefile

.SUFFIXES:
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

.PHONY: build clean
#  Implicit rule search has not been done.
#  Modification time never checked.
#  File has not been updated.

# files hash-table stats:
# Load=11/1024=1%, Rehash=0, Collisions=0/35=0%
# VPATH Search Paths

# No 'vpath' search paths.

# General ('VPATH' variable) search path:
# /d/PPs/firstgba/asm:/d/PPs/firstgba/source:/d/PPs/firstgba/resources:/d/PPs/firstgba/data

# strcache buffers: 1 (0) / strings = 61 / storage = 646 B / avg = 10 B
# current buf: size = 8162 B / used = 646 B / count = 61 / avg = 10 B

# strcache performance: lookups = 113 / hit rate = 46%
# hash-table stats:
# Load=61/8192=1%, Rehash=0, Collisions=3/113=3%
# Finished Make data base on Wed Sep 15 20:39:37 2021

 
